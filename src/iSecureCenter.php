<?php

/**
 * Created by PhpStorm.
 * User: Yangjiecheng
 * Date: 2019/8/28 0028
 * Time: 下午 14:32
 */

namespace jcore\iSecureCenter;

use Yii;
use backend\models\Config;
use yii\base\Component;
use yii\base\InvalidConfigException;
use yii\web\BadRequestHttpException;
use yii\web\ServerErrorHttpException;

class iSecureCenter extends Component
{
    CONST EVENT_BEFORE_SEND = 'beforeSend';
    CONST EVENT_AFTER_SEND = 'afterSend';

    //海康威视综合安防管理平台version
    public $version;

    // 合作方接口主机
    public $host;

    // 合作方Appkey 合作方Secret
    public $ak;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $dbConfig = Config::loadHikvideoData();
        empty($this->ak) && $this->ak = [
            'hikvideo_icenter_appkey' => $dbConfig['hikvideo_icenter_appkey'],
            'hikvideo_icenter_secret' => $dbConfig['hikvideo_icenter_secret'],
        ];

        empty($this->host) && $this->host = (int)$dbConfig['hikvideo_icenter_https'] === 1 ? 'https://' : 'http' . $dbConfig['hikvideo_icenter_ip'];

        if (empty($this->ak['hikvideo_icenter_appkey']) || empty($this->ak['hikvideo_icenter_secret']) || empty($this->host)) {
            throw new BadRequestHttpException("配置错误，无法连接到综合安防管理平台");
        }
    }

    public function send($url, $method, $message = [])
    {
        if (!$this->beforeSend($url, $method, $message)) {
            return false;
        }

        Yii::info('...Sending Hk Open Api...url#' . $url . '#method#' . $method, __METHOD__);
        $response = null;
        try {
            $response = $this->sendMessage($url, $method, $message);
        } catch (\Throwable $throwable) {
            throw new ServerErrorHttpException("无法连接到综合安防管理平台");
        } finally {
            $this->afterSend($url, $method, $message, $response);
        }

        return $response;
    }

    public function sendMessage($url, $method, $message)
    {
        if (!in_array(strtolower($method), ['get', 'post'])) {
            throw new InvalidConfigException('unknown method:' . $method);
        }
        $client = new ArtemisHttpClient([
            'baseUrl' => $this->host
        ]);
        $headers = [
            'X-Ca-Key' => $this->ak['hikvideo_icenter_appkey'],
            'X-Ca-Url' => $url,
            'X-Ca-Secret' => $this->ak['hikvideo_icenter_secret'],
            'X-Ca-Signature-Headers' => 'x-ca-key'
        ];

        $request = $client->createRequest()
            ->setFormat(ArtemisHttpClient::FORMAT_JSON)
            ->setMethod($method)
            ->setUrl($url)
            ->setHeaders($headers)
            ->setOptions(['timeout' => 5])
            ->setData($message);
        return $request->send();
    }

    public function beforeSend($url, $method, $message)
    {
        $event = new MessageEvent([
            'url' => $url,
            'method' => $method,
            'message' => $message
        ]);
        $this->trigger(self::EVENT_BEFORE_SEND, $event);

        return $event->isValid;
    }

    public function afterSend($url, $method, $message, $response)
    {
        $event = new MessageEvent([
            'url' => $url,
            'method' => $method,
            'message' => $message,
            'response' => $response
        ]);

        $this->trigger(self::EVENT_AFTER_SEND, $event);
    }
}